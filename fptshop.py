# Generated by Selenium IDE
import time
import re
import json
#import mysqldb
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import logging
from selenium.webdriver.remote.remote_connection import LOGGER
LOGGER.setLevel(logging.WARNING)


class fptshop():
  def init(self):
    service = Service(executable_path='./chromedriver.exe', log_path=None, log_level='OFF')
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")
    options.add_argument("--log-level=3")
    self.driver = webdriver.Chrome(service=service, options=options)
    self.vars = {}
  
  def quit(self):
    self.driver.quit()
  
  def get_list_brands(self):
    brand_data = []
    self.driver.get("https://fptshop.com.vn/dien-thoai")

    list_brands = self.driver.find_element(By.CLASS_NAME, 'cdt-brand-img')
    brands = list_brands.find_elements(By.TAG_NAME, 'a')

    for brand in brands:
      try:
        brand_name = brand.find_element(By.TAG_NAME, 'img').get_attribute('alt')
        link = brand.get_attribute('href')
      except:
        continue
      brand_info = {
        'brand': brand_name,
        'link': link
      }
      print(brand_info)
      brand_data.append(brand_info)
    self.driver.close()
    return brand_data
  
  def get_list_product(self, url):
    self.driver.get(url)
    try:
      get_data = self.driver.find_element(By.CLASS_NAME, 'cdt-product-wrapper')
    except:
      return []
    products = get_data.find_elements(By.CLASS_NAME, 'cdt-product')
    product_data = []
    for product in products:
        product_name = product.find_element(By.CLASS_NAME, 'cdt-product__name').text
        phone_link = product.find_element(By.CLASS_NAME, 'cdt-product__img').find_element(By.TAG_NAME, 'a').get_attribute('href')
        if 'product-sale' in product.get_attribute('class'):
          product_sale_price = product.find_element(By.CLASS_NAME, 'progress').text
          product_original_price = product.find_element(By.TAG_NAME, 'strike').text
        else:
          product_sale_price = 0
          product_original_price = product.find_element(By.CLASS_NAME, 'price').text
        promotions = product.find_elements(By.CLASS_NAME, 'cdt-product__text-promo')
        promo_texts = [promo.text for promo in promotions]
        product_attributes = product.find_elements(By.CLASS_NAME, 'cdt-product__config__param')
        attributes = {}
        for product_attribute in product_attributes:
            spans = product_attribute.find_elements(By.TAG_NAME, 'span')
            for span in spans:
                title = span.get_attribute('data-title')
                value = span.text
                attributes[title] = value
        #rating = self.get_ratings(phone_link)
        product_info = {
            'phone_name': product_name,
            'phone_link': phone_link,
            'original_price': product_original_price,
            'rating': '',
            'sale_price': product_sale_price,
            'promotions': promo_texts,
            'basic_info': attributes
        }
        
        print(product_info)
        product_data.append(product_info)
    self.driver.close()
    return product_data
  def get_ratings(self, url):
    self.driver.get(url)
    wait = WebDriverWait(self.driver, 10)
    
    
    ratings_data = {}
    try:
      get_data = wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'user-rate__box')))
    except:
      self.driver.close()
      return ratings_data
    
    ratings_data["rate_value"] = get_data.find_element(By.CLASS_NAME, 'f-s-ui-44').text
    ratings_data["total_rate"] = get_data.find_element(By.CLASS_NAME, 'text-grayscale').text
    
    element = get_data.find_element(By.CLASS_NAME, 'progress-block')
    progress_blocks = element.find_elements(By.CLASS_NAME, 'progress-block__line')

    for block in progress_blocks:
      rating = block.find_element(By.CLASS_NAME, 'text').text
      count = block.find_element(By.CLASS_NAME, 'm-l-4').text
      ratings_data[rating] = count
    self.driver.close()
    return ratings_data
    
  
fpt = fptshop()

# Lấy danh sách thương hiệu điện thoại
fpt.init()
fpt.get_list_brands()
fpt.quit()
# Lấy danh sách điện thoại theo từng thương hiệu
fpt.init()
fpt.get_list_product("https://fptshop.com.vn/dien-thoai/apple-iphone")
fpt.quit()
# # Lấy lượt đánh giá của điện thoại
fpt.init()
print(fpt.get_ratings("https://fptshop.com.vn/dien-thoai/iphone-15-pro-max?dung-luong=256gb"))
fpt.quit()

# links, brands = abc.get_list_brands()
# for i in range(0,len(links)):
#   print(links[i])
#   print(brands[i])

# abc.quit()

# abc.init()
#brand_data = []
#brand_data = fpt.get_list_brands()
#db = mysqldb.DB()
# for brand in brand_data:
#   sql = "INSERT INTO m_brands (BrandID, BrandName, BrandLink, StoreID) VALUES (%s, %s, %s, %s)"
#   val = ('fptshop_' + brand['brand'].replace(' (iPhone)',''), brand['brand'], brand['link'], 'fptshop')
#   db.insert(sql, val)
# sql = 'select BrandID, BrandLink from m_brands where StoreID=%s'
# val = ('fptshop',)
# result = db.query(sql, val).fetchall()

# for rs in result:
#   product_data = []
#   print('-------get data['+rs[0]+']-------')
#   fpt.init()
#   product_data = fpt.get_list_product(rs[1])
#   for phone in product_data:
#     sql = "INSERT INTO m_phones (PhoneName, PhoneLink, original_price, sale_price, promotions, basic_info, rating, BrandID) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"
#     val = (phone['phone_name'], phone['phone_link'], phone['original_price'], phone['sale_price'], str(phone['promotions']), str(phone['basic_info']), '', rs[0])
#     db.insert(sql, val)
#   fpt.quit()

# sql = 'select PhoneID, PhoneLink, PhoneName from m_phones WHERE BrandID like "fptshop_%"'
# result = db.query(sql, '').fetchall()


# for rs in result:
#   rating_data = []
#   print('-------get data['+rs[2]+']-------')
#   fpt.init()
#   rating_data = fpt.get_ratings(rs[1])
#   sql = "UPDATE m_phones SET rating=%s WHERE PhoneID=%s"
#   val = (str(rating_data), rs[0])
#   db.update(sql, val)
#   fpt.quit()