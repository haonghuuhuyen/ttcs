# Generated by Selenium IDE
import time
import re
import json
#import mysqldb
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import logging
from selenium.webdriver.remote.remote_connection import LOGGER
LOGGER.setLevel(logging.WARNING)


class cellphones():
  def init(self):
    service = Service(executable_path='./chromedriver.exe', log_path=None, log_level='OFF')
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")
    options.add_argument("--log-level=3")
    self.driver = webdriver.Chrome(service=service, options=options)
    self.vars = {}
  
  def quit(self):
    self.driver.quit()
  
  def get_list_brands(self):
    brand_data = []
    self.driver.get("https://cellphones.com.vn/mobile.html")

    list_brands = self.driver.find_element(By.CLASS_NAME, 'list-brand')
    brands = list_brands.find_elements(By.TAG_NAME, 'a')

    for brand in brands:
      try:
        brand_name = brand.find_element(By.TAG_NAME, 'img').get_attribute('alt')
        link = brand.get_attribute('href')
      except:
        continue
      brand_info = {
        'brand': brand_name,
        'link': link
      }
      print(brand_info)
      brand_data.append(brand_info)
    self.driver.close()
    return brand_data
  
  def get_list_product(self, url):
    self.driver.get(url)

    regex_pattern = r"Xem thêm \d+ sản phẩm"

    while True:
        try:
            show_more_link = None
            for link in self.driver.find_elements(By.TAG_NAME, 'a'):
                if re.match(regex_pattern, link.text):
                    show_more_link = link
                    break
            if not show_more_link:
                print("Không tìm thấy thẻ <a> phù hợp với biểu thức regex.")
                break
            show_more_link.click()
        except:
            print("Không tìm thấy thẻ <a>. Dừng lại.")
            break
    wait = WebDriverWait(self.driver, 10)
    get_data = wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'product-list-filter')))
    products = get_data.find_elements(By.CLASS_NAME, 'product-info-container')
    product_data = []
    for product in products:
      product_info = {}
      name_element = product.find_element(By.CLASS_NAME, 'product__name').find_element(By.TAG_NAME, 'h3')
      product_info['phone_name'] = name_element.text

      link_element = product.find_element(By.TAG_NAME, 'a').get_attribute('href')
      product_info['phone_link'] = link_element

      price_element = product.find_element(By.CLASS_NAME, 'product__price--show')
      product_info['sale_price'] = price_element.text.strip()

      
      try:
        original_price_element = product.find_element(By.CLASS_NAME, 'product__price--through')
        product_info['original_price'] = original_price_element.text.strip()
        # discount_percent_element = product.find_element(By.CLASS_NAME, 'product__price--percent-detail')
        # product_info['discount_percent'] = discount_percent_element.text.strip()
      except:
        product_info['original_price'] = product_info['sale_price']

      specifications_elements = product.find_elements(By.CLASS_NAME, 'product__more-info__item')
      specifications = [spec_element.text.strip() for spec_element in specifications_elements]
      product_info['basic_info'] = specifications

      promotions_elements = product.find_elements(By.CLASS_NAME, 'coupon-price')
      promotions = [promo_element.text.strip() for promo_element in promotions_elements]
      product_info['promotions'] = promotions

      #product_info['rating'] = self.get_ratings(link_element)
      print(product_info)
      product_data.append(product_info)
    self.driver.close()
    return product_data
  
  def get_ratings(self, url):
    self.driver.get(url)
    wait = WebDriverWait(self.driver, 10)
    ratings_data = {}
    try:
      get_data = wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'boxReview-review')))
    except:
      self.driver.close()
      self.quit
      return ratings_data

    ratings_data["rate_value"] = get_data.find_element(By.CSS_SELECTOR, '.boxReview-score.is-flex.is-justify-content-center.is-align-items-center.has-product .title.is-4.m-0.p-0').text
    ratings_data["total_rate"] = get_data.find_element(By.CLASS_NAME, 'boxReview-score__count').text
    
    element = get_data.find_element(By.CLASS_NAME, 'boxReview-star')
    progress_blocks = element.find_elements(By.CLASS_NAME, 'rating-level')

    for block in progress_blocks:
      rating = block.find_element(By.CLASS_NAME, 'has-text-weight-bold').text
      count = block.find_element(By.CLASS_NAME, 'is-size-7').text
      ratings_data[rating+'_sao'] = count.replace(' đánh giá','')
    self.driver.close()
    return ratings_data



cel = cellphones()
# Lấy danh sách thương hiệu điện thoại
# cel.init()
# cel.get_list_brands()
# cel.quit()
# Lấy danh sách điện thoại theo từng thương hiệu
# cel.init()
# cel.get_list_product("https://cellphones.com.vn/mobile/samsung.html")
# cel.quit()
# Lấy lượt đánh giá của điện thoại
cel.init()
print(cel.get_ratings("https://cellphones.com.vn/samsung-galaxy-s23-ultra.html"))
cel.quit()







# links, brands = abc.get_list_brands()
# for i in range(0,len(links)):
#   print(links[i])
#   print(brands[i])

# abc.quit()

# abc.init()
#brand_data = []
#brand_data = cel.get_list_brands()

#CREATE TABLE m_brands(BrandID varchar(255), BrandName varchar(255), BrandLink VARCHAR(255), StoreID varchar(255))
#CREATE TABLE m_phones(PhoneID int, PhoneName varchar(255), PhoneLink VARCHAR(255), original_price varchar(255), sale_price varchar(255), promotions varchar(255), basic_info varchar(255), rating varchar(255), BrandID varchar(255))
# alter table `m_phones` add primary key(PhoneID);
# alter table `m_phones` modify column PhoneID INT NOT NULL AUTO_INCREMENT;

# for brand in brand_data:
#   sql = "INSERT INTO m_brands (BrandID, BrandName, BrandLink, StoreID) VALUES (%s, %s, %s, %s)"
#   val = ('cellphones_' + brand['brand'],brand['brand'], brand['link'], 'cellphones')
#   db.insert(sql, val)
# sql = 'select BrandID, BrandLink from m_brands where StoreID=%s'
# val = ('cellphones',)
# result = db.query(sql, val).fetchall()


# for rs in result:
#   product_data = []
#   print('-------get data['+rs[0]+']-------')
#   cel.init()
#   product_data = cel.get_list_product(rs[1])
#   for phone in product_data:
#     sql = "INSERT INTO m_phones (PhoneName, PhoneLink, original_price, sale_price, promotions, basic_info, rating, BrandID) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"
#     val = (phone['phone_name'], phone['phone_link'], phone['original_price'], phone['sale_price'], str(phone['promotions']), str(phone['basic_info']), '', rs[0])
#     db.insert(sql, val)
#   cel.quit()


# sql = 'select PhoneID, PhoneLink, PhoneName from m_phones WHERE BrandID like "cellphones_%"'
# result = db.query(sql, '').fetchall()


# for rs in result:
#   rating_data = []
#   print('-------get data['+rs[2]+']-------')
#   cel.init()
#   rating_data = cel.get_ratings(rs[1])
#   sql = "UPDATE m_phones SET rating=%s WHERE PhoneID=%s"
#   val = (str(rating_data), rs[0])
#   db.update(sql, val)
#   cel.quit()